# -*- coding: utf-8 -*-
"""CNN_1_self_driving_car

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n_Vb8_MDIZwmKA329Ijz5SWoIXLRHIIw

# **CNN Code Training**
"""

!pip install -U -q PyDrive

# Install the PyDrive wrapper & import libraries.
# This only needs to be done once per notebook.
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
# This only needs to be done once per notebook.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# Download a file based on its file ID.
# A file ID looks like: laggVyWshwcyP6kEI-y_W3P8D26sz
file1 = drive.CreateFile({'id': '18N7ru0EsT5KLSrhaTGUwpDSFmxwcMYOc'})
file2 = drive.CreateFile({'id': '16pHAznT6sK6uZv8Azn1eqI0kRuPuc8-Y'})
file3 = drive.CreateFile({'id': '1MNyiAqE6uuwkrkZfZZ4ZAF-49G02TJWZ'})
file4 = drive.CreateFile({'id': '1_CrzYC8vc-eFmUDCgN2KOPjkb83c81yU'})
file5 = drive.CreateFile({'id': '1RU_dw-ajX--9MzMdrmHkDIvMMgQ3Q7Nk'})
file6 = drive.CreateFile({'id': '1gyL7-n3JzzN9Ch_JfWcIM-VZzJS4yPYj'})
file7 = drive.CreateFile({'id': '1O0UhsSzOxWBM7vCx9RLp0KtIfB6XK8kV'})
file8 = drive.CreateFile({'id': '17pa5mV7B_Zux3Yv9rEsdtvraEkVuWnfM'})
# file9 = drive.CreateFile({'id': '1CCjb_TJrq7v2RLlNJzIVZGtl8649A4Mz'})
# file10 = drive.CreateFile({'id': '1CppX_zkRwfqc5okEChAT_dAUVJB65LIL'})
file11 = drive.CreateFile({'id': '1YvBNg_43DqCGsxBs6bEVn_Va6SXB_SPe'})
file12 = drive.CreateFile({'id': '11hgsf_ybhUdKL73mhwAwZAwHPaWWukkv'})
file13 = drive.CreateFile({'id': '1W767EobnAwi8W3SoRq2b8ANiomLmK3j8'})
file14 = drive.CreateFile({'id': '1rf1tCWSOqgSJMNTSMAwgS-kyqRFbJHkG'})
file15 = drive.CreateFile({'id': '1M8mnePwuKu4xSXpscc68f6HZqHcq6fz5'})
file16 = drive.CreateFile({'id': '1zuymECeUZsQmuPy5PRgWMR1_VuLPCrMe'})

#modified train data
# file1 = drive.CreateFile({'id': '1Sgcj_-Ghm0xgqy273HUnrUqErh01tVsT'})
# file2 = drive.CreateFile({'id': '1zzr5ZWBYUKTpdp8yWQMMqBQBOrecLzrc'})
# file3 = drive.CreateFile({'id': '1BigKybJHxO3RzagHoWvXg3aiikqW2U3E'})
# file4 = drive.CreateFile({'id': '1lk5HSE4VzvIdtj4EeyLUyFryDjHN07BD'})
# file5 = drive.CreateFile({'id': '1HkMjOFbCDAUC4siWSC9IBPGTdGnJsnNI'})
# file6 = drive.CreateFile({'id': '1ko1JxiMWCJKIFb-2Lo_LtxCrzqbAy1AC'})
# file7 = drive.CreateFile({'id': '1E61imS9z8guWg-VOFHir-0IusjZPBd3Z'})
# file8 = drive.CreateFile({'id': '1RAk9NHueVy8RqadOm4FJy3MKiIXm56sH'})
# file9 = drive.CreateFile({'id': '1IK8Vrt9SVYZubAmlP2G74tY_NR4SQzVA'})
# file10 = drive.CreateFile({'id': '1elXTFQHAyaLkGokMcqDL3cObfE8xZrpB'})

#modified with recover data
# file1 = drive.CreateFile({'id': '1zmBxn8ygJmHlocwXlqJkPFpo_HDAD6oM'})
# file2 = drive.CreateFile({'id': '19mX4-LKu9lq_60-uahuszFJZ6B_cZSG1'})
# file3 = drive.CreateFile({'id': '1MX_XLySW09HWCyYcf9X9nlTRHyJJp2J4'})
# file4 = drive.CreateFile({'id': '1C1eiF4OR_51rrSdNKDG883fSYj742u4B'})
# file5 = drive.CreateFile({'id': '1itJzo21Bq77DJhLOFc46UrGJ1FnFwKvQ'})
# file6 = drive.CreateFile({'id': '1vxjiSOevFk13VjinEoOVnTs4dPxjo-VE'})
# file7 = drive.CreateFile({'id': '1v9ZJlRmQ7z-0Vz6VmZD80AfKpEi1ciES'})

# file_test1 = drive.CreateFile({'id': '1DpVBNFx0Du3vH4COXxzK34JoeVaX-gO_'})
# file_test2 = drive.CreateFile({'id': '1u-pnnzQOiyG5Qubo2QhjhGk32qq72LbY'})
# file_test3 = drive.CreateFile({'id': '17x6LOR4EbhI1uBYvbNRJ7zkWRM0fuQr7'})
# file_test4 = drive.CreateFile({'id': '1WR2OhcFheSYYR4gSeG2DWAeVRbYBERGF'})
# file_test5 = drive.CreateFile({'id': '1Kyy7nO8cvu1gPI19PeJ2tn1o9__SVcti'})
# file_test6 = drive.CreateFile({'id': '1RuBLKI5klgiFJlmAmCkIGmUJkGJeSixV'})

a1=file1.GetContentString()
a2=file2.GetContentString()
a3=file3.GetContentString()
a4=file4.GetContentString()
a5=file5.GetContentString()
a6=file6.GetContentString()
a7=file7.GetContentString()
a8=file8.GetContentString()
# a9=file9.GetContentString()
# a10=file10.GetContentString()
a11=file11.GetContentString()
a12=file12.GetContentString()
a13=file13.GetContentString()
a14=file14.GetContentString()
a15=file15.GetContentString()
a16=file16.GetContentString()

# b1=file_test1.GetContentString()
# b2=file_test2.GetContentString()
# b3=file_test3.GetContentString()
# b4=file_test4.GetContentString()
# b5=file_test5.GetContentString()
# b6=file_test6.GetContentString()

# to know size of h
h=0
h2=0
def compute_h(a):
  b=a.split('\n')
  for i in range(0,len(b)):
    if len(b[i])==0 :
      del b[i]
  return len(b)
h=h+compute_h(a1)+compute_h(a2)+compute_h(a3)+compute_h(a4)+compute_h(a5)+compute_h(a6)+compute_h(a7)+compute_h(a8)+compute_h(a15)+compute_h(a16)+compute_h(a11)+compute_h(a12)+compute_h(a13)+compute_h(a14)#+compute_h(a9)#+compute_h(a10)
# h2=h2+compute_h(b1)+compute_h(b2)+compute_h(b3)+compute_h(b4)+compute_h(b5)+compute_h(b6)
print(h)
print(h2)

import numpy as np
import pylab as plt
x=np.zeros((h,200,200,1))
y=np.zeros((h,1))
ii=0
array = []
# x_test=np.zeros((h2,200,200,1))
# y_test=np.zeros((h2,1))
# ii2=0
# array2 = []

def putting_data_in_array(a):
  array = []
  b=a.split('\n')
  for i in range(0,len(b)):
    if len(b[i])==0 :
      del b[i]
  #print(len(b))
  for line in b: # read rest of lines
    array.append([float(x) for x in line.split(',')])
  return array

def assign_values_x_y(array,indx):
  global x
  global y
  for i in range(0+indx,len(array)+indx):
    a=array[i-indx][0:200*200]
    x[i,:,:,0]=np.reshape(a,(200,200))
    y[i][0]=array[i-indx][(200*200)]
  return len(array)

def assign_values_x_y_test(array,indx):
  global x_test
  global y_test
  for i in range(0+indx,len(array)+indx):
    a=array[i-indx][0:200*200]
    x_test[i,:,:,0]=np.reshape(a,(200,200))
    y_test[i][0]=array[i-indx][(200*200)]
  return len(array)

array=putting_data_in_array(a1)
a1=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a2)
a2=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a3)
a3=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a4)
a4=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a5)
a5=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a6)
a6=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a7)
a7=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a8)
a8=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

# array=putting_data_in_array(a9)
# a9=None
# ii=ii+assign_values_x_y(array,ii)
# array=[]
# print(ii)

# array=putting_data_in_array(a10)
# a10=None
# ii=ii+assign_values_x_y(array,ii)
# array=[]
# print(ii)

array=putting_data_in_array(a11)
a11=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a12)
a12=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a13)
a13=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a14)
a14=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a15)
a15=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a16)
a16=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)
#########################################################################################
# array2=putting_data_in_array(b1)
# b1=None
# ii2=ii2+assign_values_x_y_test(array2,ii2)
# array2=[]

# array2=putting_data_in_array(b2)
# b2=None
# ii2=ii2+assign_values_x_y_test(array2,ii2)
# array2=[]

# array2=putting_data_in_array(b3)
# b3=None
# ii2=ii2+assign_values_x_y_test(array2,ii2)
# array2=[]

# array2=putting_data_in_array(b4)
# b4=None
# ii2=ii2+assign_values_x_y_test(array2,ii2)
# array2=[]

# array2=putting_data_in_array(b5)
# b5=None
# ii2=ii2+assign_values_x_y_test(array2,ii2)
# array2=[]

# array2=putting_data_in_array(b6)
# b6=None
# ii2=ii2+assign_values_x_y_test(array2,ii2)
# array2=[]

import matplotlib.pyplot as plt
import numpy as np
im = plt.imshow(x[500,:,:,0], cmap='gray')
plt.colorbar(im, orientation='horizontal')
plt.show()
gaussian_numbers = y*180/3.14
plt.hist(gaussian_numbers)
plt.title("Gaussian Histogram")
plt.xlabel("Value")
plt.ylabel("Frequency")
fig = plt.gcf()
print(np.amax(y)*180/3.14)

#np.abs()
import math
import numpy as np
import h5py
import matplotlib.pyplot as plt
import scipy
from scipy import ndimage
import tensorflow as tf
from tensorflow.python.framework import ops

def create_placeholders(n_H0, n_W0, n_C0, n_y):
    X = tf.placeholder(tf.float32, [None, n_H0, n_W0, n_C0])
    Y = tf.placeholder(tf.float32, [n_y,None])
    return X, Y

def initialize_parameters():
    W1 = tf.get_variable("W1", [5, 5, 1, 24], initializer=tf.contrib.layers.xavier_initializer())
    W2 = tf.get_variable("W2", [5, 5, 24, 36], initializer=tf.contrib.layers.xavier_initializer())
    W3 = tf.get_variable("W3", [5, 5, 36, 48], initializer=tf.contrib.layers.xavier_initializer())
    W4 = tf.get_variable("W4", [3, 3, 48, 64], initializer=tf.contrib.layers.xavier_initializer())
    W5 = tf.get_variable("W5", [3, 3, 64, 76], initializer=tf.contrib.layers.xavier_initializer())
    
    W6 = tf.get_variable("W6", [100, 47500], initializer = tf.contrib.layers.xavier_initializer())
    b6 = tf.get_variable("b6", [100, 1], initializer = tf.zeros_initializer())
    W7 = tf.get_variable("W7", [50, 100], initializer = tf.contrib.layers.xavier_initializer())
    b7 = tf.get_variable("b7", [50, 1], initializer = tf.zeros_initializer())
    W8 = tf.get_variable("W8", [10, 50], initializer = tf.contrib.layers.xavier_initializer())
    b8 = tf.get_variable("b8", [10, 1], initializer = tf.zeros_initializer())
    W9 = tf.get_variable("W9", [1, 10], initializer = tf.contrib.layers.xavier_initializer())
    b9 = tf.get_variable("b9", [1, 1], initializer = tf.zeros_initializer())
    parameters = {"W1":W1,"W2":W2,"W3":W3,"W4":W4,"W5":W5,"W6":W6,"W7":W7,"W8":W8,"W9":W9,"b6":b6,"b7":b7,"b8":b8,"b9":b9}
    return parameters

def forward_propagation(X, parameters):
    W1 = parameters['W1']
    W2 = parameters['W2']
    W3 = parameters['W3']
    W4 = parameters['W4']
    W5 = parameters['W5']
    W6 = parameters['W6']
    W7 = parameters['W7']
    W8 = parameters['W8']
    W9 = parameters['W9']
    b6 = parameters['b6']
    b7 = parameters['b7']
    b8 = parameters['b8']
    b9 = parameters['b9']
    
    print(X.shape)
    Z1 = tf.nn.conv2d(X, W1, strides=[1, 2, 2, 1], padding='SAME')
    A1 = tf.nn.relu(Z1)
    print(A1.shape)
    Z2 = tf.nn.conv2d(A1, W2, strides=[1, 2, 2, 1], padding='SAME')
    A2 = tf.nn.relu(Z2)
    print(A2.shape)
    Z3 = tf.nn.conv2d(A2, W3, strides=[1, 2, 2, 1], padding='SAME')
    A3 = tf.nn.relu(Z3)
    print(A3.shape)
    Z4 = tf.nn.conv2d(A3, W4, strides=[1, 1, 1, 1], padding='SAME')
    A4 = tf.nn.relu(Z4)
    print(A4.shape)
    Z5 = tf.nn.conv2d(A4, W5, strides=[1, 1, 1, 1], padding='SAME')
    A5 = tf.nn.relu(Z5)
    print(A5.shape)
    
    P = tf.transpose(tf.contrib.layers.flatten(A5))
    print(P.shape)
    print(W6.shape)
    
    Z6 = tf.add(tf.matmul(W6, P), b6)
    A6 = tf.nn.relu(Z6)
    print(A6.shape)
    Z7 = tf.add(tf.matmul(W7, A6), b7)
    A7 = tf.nn.relu(Z7)
    print(A7.shape)
    Z8 = tf.add(tf.matmul(W8, A7), b8) 
    A8 = tf.nn.relu(Z8)
    print(A8.shape)
    Z9 = tf.add(tf.matmul(W9, A8), b9)
    print(Z9.shape)
    return Z9

def compute_cost(Z3, Y):
    #cost=tf.reduce_sum(tf.losses.absolute_difference(labels=Y,predictions=Z3))
    #cost=tf.reduce_sum(tf.multiply(Y, tf.log(Z3)) + tf.multiply(1 - Y, tf.log(1 - Z3)))
    #cost=tf.multiply(tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(Y, Z3)))) , 1/64)
    #cost=tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(Y, Z3))))                          #good
    cost=tf.add( tf.multiply(tf.reduce_max(tf.square(tf.subtract(Y, Z3))),1) , tf.multiply(tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(Y, Z3)))),1) )
    #cost=tf.metrics.mean_squared_error(labels=Y,predictions=Z3)
    #print(Y.shape,Z3.shape)
    #cost=tf.reduce_mean(tf.subtract(tf.exp(tf.abs(tf.subtract(Z3, Y))),1))
    return cost

def random_mini_batches(X, Y, mini_batch_size):
    m = X.shape[0]                  # number of training examples
    mini_batches = []

    permutation = list(np.random.permutation(m))
    shuffled_X = X[permutation,:]
    #shuffled_Y = Y[permutation,:].reshape((m,1))
    shuffled_Y = Y[:,permutation].reshape((1,m))

    num_complete_minibatches = int(math.floor(m/mini_batch_size)) 
    for k in range(0, num_complete_minibatches):
        mini_batch_X = shuffled_X[k * mini_batch_size:(k + 1) * mini_batch_size,:,:,:]
        mini_batch_Y = shuffled_Y[:,k * mini_batch_size:(k + 1) * mini_batch_size]
        mini_batch = (mini_batch_X, mini_batch_Y)
        mini_batches.append(mini_batch)
    
    if m % mini_batch_size != 0:
        end = m - mini_batch_size * math.floor(m / mini_batch_size)
        mini_batch_X = shuffled_X[num_complete_minibatches * mini_batch_size:,:,:,:]
        mini_batch_Y = shuffled_Y[:,num_complete_minibatches * mini_batch_size:]
        mini_batch = (mini_batch_X, mini_batch_Y)
        mini_batches.append(mini_batch)
        
    return mini_batches

def model(X_train, Y_train,X_test, Y_test, learning_rate=0.0009,num_epochs=40, minibatch_size=128, print_cost=True):
    #Y_train=Y_train*180/3.14
    #Y_test=Y_test*180/3.14
    ops.reset_default_graph()                 # to be able to rerun the model without overwriting tf variables
    (m, n_H0, n_W0, n_C0) = X_train.shape
    kk=X_test.shape[0]
    n_y = Y_train.shape[1]
    qq=Y_train.shape[0]
    Y_train = np.reshape(Y_train,(1,qq))
    costs = []
    tmpp=np.zeros((1,200,200,1))
    tmppy=np.zeros((1,1))
    
    X, Y = create_placeholders(n_H0, n_W0, n_C0, n_y)
    print("create_placeholders done")
    parameters = initialize_parameters()
    print("initialize_parameters done")
    Z9 = forward_propagation(X, parameters)
    print("forward_propagation done")
    print(Y.shape,Z9.shape)
    cost = compute_cost(Z9, Y)
    print("compute_cost done")
    optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)
    #optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(cost)
    
    print("AdamOptimizer done")
    
    init = tf.global_variables_initializer()
    print("init done")
    with tf.Session() as sess:
        sess.run(init)
        #for num_of_itera in range (0,5):
          #print("iteration number = %i" % (num_of_itera))
#         for i in range (1,800):
#           tmpp[0,:,:,:]=X_test[i,:,:,:]
#           tmppy[0,:]=Y_test[i,:]
#           y = sess.run(Z3, feed_dict={X:tmpp, Y:tmppy})
#           print("Test = %s y = %s" % (str(y), str(Y_test[i][0])))
        for epoch in range(num_epochs):
          minibatch_cost = 0.
          num_minibatches = int(m / minibatch_size)
          minibatches = random_mini_batches(X_train, Y_train, minibatch_size)
          #print(Y_train[1,0])
          for minibatch in minibatches:
              (minibatch_X, minibatch_Y) = minibatch
              y,oop, temp_cost = sess.run([Z9,optimizer, cost], feed_dict={X:minibatch_X, Y:minibatch_Y})
              minibatch_cost += temp_cost / num_minibatches

              #print("Test = %s y = %s" % (str(y), str(minibatch_Y)))
          if print_cost == True:
              print ("Cost after epoch %i: %f" % (epoch, minibatch_cost*180/3.14))

          if print_cost == True and epoch % 1 == 0:
              costs.append(minibatch_cost)
          if minibatch_cost*180/3.14<0.5:
              break
#         max_error=0
#         max_angle=0
#         for i in range (1,kk):
#           tmpp[0,:,:,:]=X_test[i,:,:,:]
#           tmppy[0,:]=Y_test[i,:]
#           y = sess.run(Z9, feed_dict={X:tmpp, Y:tmppy})
#           print("Test = %s y = %s error = %s" % (str(y), str(Y_test[i][0]),str(abs(Y_test[i][0]-y))))
#           max_error=np.maximum(max_error, np.abs(Y_test[i][0]-y) )
#           max_angle=np.maximum(max_angle,np.abs(Y_test[i][0]))
#           if np.abs(Y_test[i][0]-y)>5:
#             print("############################################################################################")
#         print("max_error = %s max_angle = %s"%(str(max_error),str(max_angle)))
        #plot the cost
        plt.plot(np.squeeze(costs))
        plt.ylabel('cost')
        plt.xlabel('iterations (per tens)')
        plt.title("Learning rate =" + str(learning_rate))
        plt.show()
        
        # Calculate accuracy on the test set
        #accuracy = compute_cost(Z3, Y)
        #print(accuracy)
        #train_accuracy = accuracy.eval({X: X_test, Y: Y_test})
        #print("Train Accuracy:", train_accuracy)
        
        return sess.run(parameters)

# xtemp=x[0:80,:,:,:]
# ytemp=y[0:80,:]
#print(xtemp)
parameters = model(x/255, y, x/255, y) #*180/3.14
# for i in y_test:
#   if i==0 :
#     print(i)

#######################################################################################

# np.abs()
list1 = parameters['W1'].reshape(5*5*1*24)
W1 = ','.join(str(e) for e in list1) #[5, 5, 1, 24]
list1 = parameters['W2'].reshape(5*5*24*36)
W2 = ','.join(str(e) for e in list1) #[5, 5, 24, 36]
list1 = parameters['W3'].reshape(5*5*36*48)
W3 = ','.join(str(e) for e in list1) #[5, 5, 36, 48]
list1 = parameters['W4'].reshape(3*3*48*64)
W4 = ','.join(str(e) for e in list1) #[3, 3, 48, 64]
list1 = parameters['W5'].reshape(3*3*64*76)
W5 = ','.join(str(e) for e in list1) #[3, 3, 64, 76]
list1 = parameters['W6'].reshape(100*47500)
W6 = ','.join(str(e) for e in list1) #[100, 47500]
list1 = parameters['b6'].reshape(100*1)
b6 = ','.join(str(e) for e in list1) #[100, 1]
list1 = parameters['W7'].reshape(50*100)
W7 = ','.join(str(e) for e in list1) #[50, 100]
list1 = parameters['b7'].reshape(50*1)
b7 = ','.join(str(e) for e in list1) #[50, 1]
list1 = parameters['W8'].reshape(10*50)
W8 = ','.join(str(e) for e in list1) #[10, 50]
list1 = parameters['b8'].reshape(10*1)
b8 = ','.join(str(e) for e in list1) #[10, 1]
list1 = parameters['W9'].reshape(1*10)
W9 = ','.join(str(e) for e in list1) #[1, 10]
list1 = parameters['b9'].reshape(1*1)
b9 = ','.join(str(e) for e in list1) #[1, 1]

# Install the PyDrive wrapper & import libraries.
# This only needs to be done once in a notebook.
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
# This only needs to be done once in a notebook.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# Create & upload a text file.
out1 = drive.CreateFile({'title': 'W1.txt'})
out1.SetContentString(W1)
out1.Upload()

out2 = drive.CreateFile({'title': 'W2.txt'})
out2.SetContentString(W2)
out2.Upload()

out3 = drive.CreateFile({'title': 'W3.txt'})
out3.SetContentString(W3)
out3.Upload()

out4 = drive.CreateFile({'title': 'W4.txt'})
out4.SetContentString(W4)
out4.Upload()

out5 = drive.CreateFile({'title': 'W5.txt'})
out5.SetContentString(W5)
out5.Upload()

out6 = drive.CreateFile({'title': 'W6.txt'})
out6.SetContentString(W6)
out6.Upload()

out7 = drive.CreateFile({'title': 'W7.txt'})
out7.SetContentString(W7)
out7.Upload()

out8 = drive.CreateFile({'title': 'W8.txt'})
out8.SetContentString(W8)
out8.Upload()

out9 = drive.CreateFile({'title': 'W9.txt'})
out9.SetContentString(W9)
out9.Upload()

out10 = drive.CreateFile({'title': 'b6.txt'})
out10.SetContentString(b6)
out10.Upload()

out11 = drive.CreateFile({'title': 'b7.txt'})
out11.SetContentString(b7)
out11.Upload()

out12 = drive.CreateFile({'title': 'b8.txt'})
out12.SetContentString(b8)
out12.Upload()

out13 = drive.CreateFile({'title': 'b9.txt'})
out13.SetContentString(b9)
out13.Upload()
#np.abs()

"""# Testing **Code** **1**"""

# from pydrive.auth import GoogleAuth
# from pydrive.drive import GoogleDrive
# from google.colab import auth
# from oauth2client.client import GoogleCredentials

# auth.authenticate_user()
# gauth = GoogleAuth()
# gauth.credentials = GoogleCredentials.get_application_default()
# drive = GoogleDrive(gauth)


# def create_placeholders(n_H0, n_W0, n_C0):
#   X = tf.placeholder(tf.float32, [None, n_H0, n_W0, n_C0])
#   return X
#   W1_tf = tf.constant(parameters['W1'])
#   W2_tf = tf.constant(parameters['W2'])
#   W3_tf = tf.constant(parameters['W3'])
#   W4_tf = tf.constant(parameters['W4'])
#   W5_tf = tf.constant(parameters['W5'])
#   W6_tf = tf.constant(parameters['W6'])
#   W7_tf = tf.constant(parameters['W7'])
#   W8_tf = tf.constant(parameters['W8'])
#   W9_tf = tf.constant(parameters['W9'])
#   b6_tf = tf.constant(parameters['b6'])
#   b7_tf = tf.constant(parameters['b7'])
#   b8_tf = tf.constant(parameters['b8'])
#   b9_tf = tf.constant(parameters['b9'])
#   parameters = {"W1":W1_tf,"W2":W2_tf,"W3":W3_tf,"W4":W4_tf,"W5":W5_tf,"W6":W6_tf,"W7":W7_tf,"W8":W8_tf,"W9":W9_tf,"b6":b6_tf,"b7":b7_tf,"b8":b8_tf,"b9":b9_tf}
# def forward_propagation(X, parameters):
#   W1 = parameters['W1']
#   W2 = parameters['W2']
#   W3 = parameters['W3']
#   W4 = parameters['W4']
#   W5 = parameters['W5']
#   W6 = parameters['W6']
#   W7 = parameters['W7']
#   W8 = parameters['W8']
#   W9 = parameters['W9']
#   b6 = parameters['b6']
#   b7 = parameters['b7']
#   b8 = parameters['b8']
#   b9 = parameters['b9']
  

#   Z1 = tf.nn.conv2d(X, W1, strides=[1, 2, 2, 1], padding='SAME')
#   A1 = tf.nn.relu(Z1)
#   Z2 = tf.nn.conv2d(A1, W2, strides=[1, 2, 2, 1], padding='SAME')
#   A2 = tf.nn.relu(Z2)
#   Z3 = tf.nn.conv2d(A2, W3, strides=[1, 2, 2, 1], padding='SAME')
#   A3 = tf.nn.relu(Z3)
#   Z4 = tf.nn.conv2d(A3, W4, strides=[1, 1, 1, 1], padding='SAME')
#   A4 = tf.nn.relu(Z4)
#   Z5 = tf.nn.conv2d(A4, W5, strides=[1, 1, 1, 1], padding='SAME')
#   A5 = tf.nn.relu(Z5)

#   P = tf.transpose(tf.contrib.layers.flatten(A5))

#   Z6 = tf.add(tf.matmul(W6, P), b6)
#   A6 = tf.nn.relu(Z6)
#   Z7 = tf.add(tf.matmul(W7, A6), b7)
#   A7 = tf.nn.relu(Z7)
#   Z8 = tf.add(tf.matmul(W8, A7), b8) 
#   A8 = tf.nn.relu(Z8)
#   Z9 = tf.add(tf.matmul(W9, A8), b9)
#   return Z9
# m=x_test.shape[0]
# max_error=0
# max_angle=0
# tmpp=np.zeros((1,200,200,1))
# X = create_placeholders(200, 200, 1)
# #parameters = cnn_algo.initialize_parameters()
# Z3 = forward_propagation(X, parameters)

# init = tf.global_variables_initializer()
# sess = tf.Session()
# for i in range (0,m):
#   sess.run(init)
#   tmpp[0,:,:,:]=x_test[i,:,:,:]
#   y = sess.run(Z3, feed_dict={X:tmpp/255})
#   print("Test = %s y = %s error = %s" % (str(y), str(y_test[i][0]*180/3.14),str(abs((y_test[i][0]*180/3.14)-y))))
#   max_error=np.maximum(max_error, np.abs((y_test[i][0]*180/3.14)-y) )
#   max_angle=np.maximum(max_angle,np.abs(y_test[i][0]*180/3.14))
# print("max_error = %s max_angle = %s"%(str(max_error),str(max_angle)))

"""# **Testing Code 2**"""

# np.abs()
!pip install -U -q PyDrive
# Install the PyDrive wrapper & import libraries.
# This only needs to be done once per notebook.
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
# This only needs to be done once per notebook.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

file_test1 = drive.CreateFile({'id': '1DpVBNFx0Du3vH4COXxzK34JoeVaX-gO_'})
file_test2 = drive.CreateFile({'id': '1u-pnnzQOiyG5Qubo2QhjhGk32qq72LbY'})
file_test3 = drive.CreateFile({'id': '17x6LOR4EbhI1uBYvbNRJ7zkWRM0fuQr7'})
file_test4 = drive.CreateFile({'id': '1WR2OhcFheSYYR4gSeG2DWAeVRbYBERGF'})
file_test5 = drive.CreateFile({'id': '1Kyy7nO8cvu1gPI19PeJ2tn1o9__SVcti'})
file_test6 = drive.CreateFile({'id': '1RuBLKI5klgiFJlmAmCkIGmUJkGJeSixV'})

b1=file_test1.GetContentString()
b2=file_test2.GetContentString()
b3=file_test3.GetContentString()
b4=file_test4.GetContentString()
b5=file_test5.GetContentString()
b6=file_test6.GetContentString()

# to know size of h
h=0
h2=0
def compute_h(a):
  b=a.split('\n')
  for i in range(0,len(b)):
    if len(b[i])==0 :
      del b[i]
  return len(b)
h2=h2+compute_h(b1)+compute_h(b2)+compute_h(b3)+compute_h(b4)+compute_h(b5)+compute_h(b6)
print(h2)

import numpy as np
import pylab as plt
# x=np.zeros((h,200,200,1))
# y=np.zeros((h,1))
# ii=0
# array = []
x_test=np.zeros((h2,200,200,1))
y_test=np.zeros((h2,1))
ii2=0
array2 = []

def putting_data_in_array(a):
  array = []
  b=a.split('\n')
  for i in range(0,len(b)):
    if len(b[i])==0 :
      del b[i]
  #print(len(b))
  for line in b: # read rest of lines
    array.append([float(x) for x in line.split(',')])
  return array

# def assign_values_x_y(array,indx):
#   global x
#   global y
#   for i in range(0+indx,len(array)+indx):
#     a=array[i-indx][0:200*200]
#     x[i,:,:,0]=np.reshape(a,(200,200))
#     y[i][0]=array[i-indx][(200*200)]
#   return len(array)

def assign_values_x_y_test(array,indx):
  global x_test
  global y_test
  for i in range(0+indx,len(array)+indx):
    a=array[i-indx][0:200*200]
    x_test[i,:,:,0]=np.reshape(a,(200,200))
    y_test[i][0]=array[i-indx][(200*200)]
  return len(array)

array2=putting_data_in_array(b1)
b1=None
ii2=ii2+assign_values_x_y_test(array2,ii2)
array2=[]

array2=putting_data_in_array(b2)
b2=None
ii2=ii2+assign_values_x_y_test(array2,ii2)
array2=[]

array2=putting_data_in_array(b3)
b3=None
ii2=ii2+assign_values_x_y_test(array2,ii2)
array2=[]

array2=putting_data_in_array(b4)
b4=None
ii2=ii2+assign_values_x_y_test(array2,ii2)
array2=[]

array2=putting_data_in_array(b5)
b5=None
ii2=ii2+assign_values_x_y_test(array2,ii2)
array2=[]

array2=putting_data_in_array(b6)
b6=None
ii2=ii2+assign_values_x_y_test(array2,ii2)
array2=[]

import math
import numpy as np
import h5py
import matplotlib.pyplot as plt
import scipy
from scipy import ndimage
import tensorflow as tf
from tensorflow.python.framework import ops

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
# This only needs to be done once per notebook.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)
#first_train
# W1_file = drive.CreateFile({'id': '1Je2t1D3sLKNpQiUIj0QPVe2AQnq9Gpy1'})
# W2_file = drive.CreateFile({'id': '1o9U6ZLIsvMFoJ5GhwcgzVCUHlVlJ_t5H'})
# W3_file = drive.CreateFile({'id': '1Gy68mkoB6X9BZZuiUYnoEGqXN1rJhnTc'})
# W4_file = drive.CreateFile({'id': '1PMzQOUA9gJXlx-EJujGwvO5r45LKfq9w'})
# W5_file = drive.CreateFile({'id': '1lB45RZKILYPLZSFgfWrRAC-2GF8qSpXI'})
# W6_file = drive.CreateFile({'id': '1bBj40YqPc4nHcIZv-1fibaTFZuI8OuuW'})
# W7_file = drive.CreateFile({'id': '1Whn7LJ1IHBB7INOg9KwvnEH0WTBNSWLX'})
# W8_file = drive.CreateFile({'id': '1J75xo9HXYcyxKSuxT_cU0G8T02RI-BXT'})
# W9_file = drive.CreateFile({'id': '1kpGT_M83mF8O7clqi-v_RGp3X8X2AH1z'})
# b6_file = drive.CreateFile({'id': '1w7hdCrK6wfoLjak9C84QWcwIhgMMDqEB'})
# b7_file = drive.CreateFile({'id': '1_G69D6GgAF73EbNei8aN6RGoBjLmtpFD'})
# b8_file = drive.CreateFile({'id': '1WdIWI2UN3uaSXqHy12P98X_niFsLfWxf'})
# b9_file = drive.CreateFile({'id': '11ywbE8nYl3VOyarWeLvP7oFKNyViY4ZB'})
  
# W1_txt=W1_file.GetContentString()
# W2_txt=W2_file.GetContentString()
# W3_txt=W3_file.GetContentString()
# W4_txt=W4_file.GetContentString()
# W5_txt=W5_file.GetContentString()
# W6_txt=W6_file.GetContentString()
# W7_txt=W7_file.GetContentString()
# W8_txt=W8_file.GetContentString()
# W9_txt=W9_file.GetContentString()  
# b6_txt=b6_file.GetContentString()
# b7_txt=b7_file.GetContentString()
# b8_txt=b8_file.GetContentString()
# b9_txt=b9_file.GetContentString()

# W1 = np.asarray( putting_data_in_array(W1_txt) )
# W2 = np.asarray( putting_data_in_array(W2_txt) )
# W3 = np.asarray( putting_data_in_array(W3_txt) )
# W4 = np.asarray( putting_data_in_array(W4_txt) )
# W5 = np.asarray( putting_data_in_array(W5_txt) )
# W6 = np.asarray( putting_data_in_array(W6_txt) )
# W7 = np.asarray( putting_data_in_array(W7_txt) )
# W8 = np.asarray( putting_data_in_array(W8_txt) )
# W9 = np.asarray( putting_data_in_array(W9_txt) )
# b6 = np.asarray( putting_data_in_array(b6_txt) )
# b7 = np.asarray( putting_data_in_array(b7_txt) )
# b8 = np.asarray( putting_data_in_array(b8_txt) )
# b9 = np.asarray( putting_data_in_array(b9_txt) )

# W1 = W1.reshape(5, 5, 1, 24).astype(np.float32)
# W2 = W2.reshape(5, 5, 24, 36).astype(np.float32)
# W3 = W3.reshape(5, 5, 36, 48).astype(np.float32)
# W4 = W4.reshape(3, 3, 48, 64).astype(np.float32)
# W5 = W5.reshape(3, 3, 64, 76).astype(np.float32)
# W6 = W6.reshape(100, 47500).astype(np.float32)
# W7 = W7.reshape(50, 100).astype(np.float32)
# W8 = W8.reshape(10, 50).astype(np.float32)
# W9 = W9.reshape(1, 10).astype(np.float32)
# b6 = b6.reshape(100, 1).astype(np.float32)
# b7 = b7.reshape(50, 1).astype(np.float32)
# b8 = b8.reshape(10, 1).astype(np.float32)
# b9 = b9.reshape(1, 1).astype(np.float32)
# #print(W8)


# W1_tf = tf.constant(W1)
# W2_tf = tf.constant(W2)
# W3_tf = tf.constant(W3)
# W4_tf = tf.constant(W4)
# W5_tf = tf.constant(W5)
# W6_tf = tf.constant(W6)
# W7_tf = tf.constant(W7)
# W8_tf = tf.constant(W8)
# W9_tf = tf.constant(W9)
# b6_tf = tf.constant(b6)
# b7_tf = tf.constant(b7)
# b8_tf = tf.constant(b8)
# b9_tf = tf.constant(b9)


W1_tf = parameters['W1']
W2_tf = parameters['W2']
W3_tf = parameters['W3']
W4_tf = parameters['W4']
W5_tf = parameters['W5']
W6_tf = parameters['W6']
W7_tf = parameters['W7']
W8_tf = parameters['W8']
W9_tf = parameters['W9']
b6_tf = parameters['b6']
b7_tf = parameters['b7']
b8_tf = parameters['b8']
b9_tf = parameters['b9']
parameters = {"W1":W1_tf,"W2":W2_tf,"W3":W3_tf,"W4":W4_tf,"W5":W5_tf,"W6":W6_tf,"W7":W7_tf,"W8":W8_tf,"W9":W9_tf,"b6":b6_tf,"b7":b7_tf,"b8":b8_tf,"b9":b9_tf}

def create_placeholders(n_H0, n_W0, n_C0):
  X = tf.placeholder(tf.float32, [None, n_H0, n_W0, n_C0])
  return X


def forward_propagation(X, parameters):
  W1 = parameters['W1']
  W2 = parameters['W2']
  W3 = parameters['W3']
  W4 = parameters['W4']
  W5 = parameters['W5']
  W6 = parameters['W6']
  W7 = parameters['W7']
  W8 = parameters['W8']
  W9 = parameters['W9']
  b6 = parameters['b6']
  b7 = parameters['b7']
  b8 = parameters['b8']
  b9 = parameters['b9']
  

  Z1 = tf.nn.conv2d(X, W1, strides=[1, 2, 2, 1], padding='SAME')
  A1 = tf.nn.relu(Z1)
  Z2 = tf.nn.conv2d(A1, W2, strides=[1, 2, 2, 1], padding='SAME')
  A2 = tf.nn.relu(Z2)
  Z3 = tf.nn.conv2d(A2, W3, strides=[1, 2, 2, 1], padding='SAME')
  A3 = tf.nn.relu(Z3)
  Z4 = tf.nn.conv2d(A3, W4, strides=[1, 1, 1, 1], padding='SAME')
  A4 = tf.nn.relu(Z4)
  Z5 = tf.nn.conv2d(A4, W5, strides=[1, 1, 1, 1], padding='SAME')
  A5 = tf.nn.relu(Z5)

  P = tf.transpose(tf.contrib.layers.flatten(A5))

  Z6 = tf.add(tf.matmul(W6, P), b6)
  A6 = tf.nn.relu(Z6)
  Z7 = tf.add(tf.matmul(W7, A6), b7)
  A7 = tf.nn.relu(Z7)
  Z8 = tf.add(tf.matmul(W8, A7), b8) 
  A8 = tf.nn.relu(Z8)
  Z9 = tf.add(tf.matmul(W9, A8), b9)
  return Z9

#x_test=np.zeros((h2,200,200,1))
#y_test=np.zeros((h2,1))
max_error=0
max_angle=0
tmpp=np.zeros((1,200,200,1))
m=x_test.shape[0]
X = create_placeholders(200, 200, 1)
#parameters = cnn_algo.initialize_parameters()
Z3 = forward_propagation(X, parameters)

init = tf.global_variables_initializer()
sess = tf.Session()
for i in range (0,m):
  sess.run(init)
  tmpp[0,:,:,:]=x_test[i,:,:,:]
  y = sess.run(Z3, feed_dict={X:tmpp/255})#,parameters['W1']:W1,parameters['W2']:W2,parameters['W3']:W3,parameters['W4']:W4,parameters['W5']:W5,parameters['W6']:W6,parameters['W7']:W7,parameters['W8']:W8,parameters['W9']:W9,parameters['b6']:b6,parameters['b7']:b7,parameters['b8']:b8,parameters['b9']:b9})
  print("Test = %s y = %s error=%s" % (str(y*180/3.14), str(y_test[i][0]*180/3.14),str((y_test[i][0]*180/3.14)-(y*180/3.14))))
  max_error=np.maximum(max_error, np.abs((y_test[i][0]*180/3.14)-(y*180/3.14)) )
  max_angle=np.maximum(max_angle,np.abs(y_test[i][0]*180/3.14))
  if np.abs((y_test[i][0]*180/3.14)-(y*180/3.14))>5:
    print("###########################################################################################")
print("max_error=%s max_angle=%s"%(str(max_error),str(max_angle)))

"""# **Modifying Training Data**"""

np.abs()
!pip install -U -q PyDrive
# Install the PyDrive wrapper & import libraries.
# This only needs to be done once per notebook.
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
# This only needs to be done once per notebook.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# Download a file based on its file ID.
# A file ID looks like: laggVyWshwcyP6kEI-y_W3P8D26sz
file1 = drive.CreateFile({'id': '1DpVBNFx0Du3vH4COXxzK34JoeVaX-gO_'})
file2 = drive.CreateFile({'id': '1Wg3kgFoqA0m2s3uS3IXVWmas3aNwIjVf'})
file3 = drive.CreateFile({'id': '1ftMjSJ8UUgRA1rLBYJYi0B2ScWPkCUQE'})
file4 = drive.CreateFile({'id': '1bWfC5USBFA6PiBVRrB9FVhTH7HI3fNRL'})
file5 = drive.CreateFile({'id': '1Q2XyOR0EMiBKCoJ1rOs5GurlJa0deAsF'})
file6 = drive.CreateFile({'id': '1EZC4S3IohObh8dDgsF8pl8tRiooLNsTD'})
file7 = drive.CreateFile({'id': '102JGovF7fqFZMpGC8QMrQF4cWwNsDx3H'})
file8 = drive.CreateFile({'id': '1kU8fZYEKPVfC5nhLgMxE4gTZpGr4J40o'})
file9 = drive.CreateFile({'id': '1_xWtU99NtDhVImp1hYZCuz-EmUykhdQA'})
file10 = drive.CreateFile({'id': '16h_W934jWWbRgBATxw0jAdr0hxY_Xc09'})
file11 = drive.CreateFile({'id': '17pa5mV7B_Zux3Yv9rEsdtvraEkVuWnfM'})
file12 = drive.CreateFile({'id': '1DAO1OFZfc9aTqtTIk84Wi8rN3mGgubTv'})
file13 = drive.CreateFile({'id': '1Ph5jinVvr6DuJo4zthBNPqnzXQK-i9I6'})

a1=file1.GetContentString()
a2=file2.GetContentString()
a3=file3.GetContentString()
a4=file4.GetContentString()
a5=file5.GetContentString()
a6=file6.GetContentString()
a7=file7.GetContentString()
a8=file8.GetContentString()
a9=file9.GetContentString()
a10=file10.GetContentString()
a11=file11.GetContentString()
a12=file12.GetContentString()
a13=file13.GetContentString()

# to know size of h
h=0
def compute_h(a):
  b=a.split('\n')
  for i in range(0,len(b)):
    if len(b[i])==0 :
      del b[i]
  return len(b)
h=h+compute_h(a1)+compute_h(a2)+compute_h(a3)+compute_h(a4)+compute_h(a5)+compute_h(a6)+compute_h(a7)+compute_h(a8)+compute_h(a9)+compute_h(a10)+compute_h(a11)+compute_h(a12)+compute_h(a13)
print(h)

import numpy as np
import pylab as plt
x=np.zeros((h,200,200,1))
y=np.zeros((h,1))
ii=0
array = []

def putting_data_in_array(a):
  array = []
  b=a.split('\n')
  for i in range(0,len(b)):
    if len(b[i])==0 :
      del b[i]
  #print(len(b))
  for line in b: # read rest of lines
    array.append([float(x) for x in line.split(',')])
  return array

def assign_values_x_y(array,indx):
  global x
  global y
  for i in range(0+indx,len(array)+indx):
    a=array[i-indx][0:200*200]
    x[i,:,:,0]=np.reshape(a,(200,200))
    y[i][0]=array[i-indx][(200*200)]
  return len(array)


array=putting_data_in_array(a1)
a1=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a2)
a2=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a3)
a3=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a4)
a4=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a5)
a5=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a6)
a6=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a7)
a7=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a8)
a8=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a9)
a9=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

array=putting_data_in_array(a10)
a10=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)
array=putting_data_in_array(a11)
a11=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)
array=putting_data_in_array(a12)
a12=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)
array=putting_data_in_array(a13)
a13=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

import matplotlib.pyplot as plt
import numpy as np
gaussian_numbers = y*180/3.14
plt.hist(gaussian_numbers)
plt.title("Gaussian Histogram")
plt.xlabel("Value")
plt.ylabel("Frequency")
fig = plt.gcf()
print(np.amax(y)*180/3.14)

import matplotlib.pyplot as plt
import numpy as np
gaussian_numbers = y*180/3.14
plt.hist(gaussian_numbers)
plt.title("Gaussian Histogram")
plt.xlabel("Value")
plt.ylabel("Frequency")
fig = plt.gcf()
print(np.amax(y)*180/3.14)

ii=y.shape[0]
print("done")
cnt=0
cnt2=0
data_mod1=""
data_mod2=""
data_mod3=""
data_mod4=""
data_mod5=""
data_mod6=""
data_mod7=""
data_mod8=""
data_mod9=""
data_mod10=""
num_data_mod=0
for i in range (0,ii):
#   if i%100==0 :
#     print(i)
  if cnt<1000 and y[i,0]*180/3.14<=4 and y[i,0]*180/3.14>=-2:
    cnt=cnt+1
    list1=x[i,:,:,:].reshape(200*200*1)
    temp_str = ','.join(str(e) for e in list1)
    if num_data_mod<=555 :
      data_mod1 = data_mod1 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*2 :
      data_mod2 = data_mod2 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*3 :
      data_mod3 = data_mod3 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*4 :
      data_mod4 = data_mod4 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*5 :
      data_mod5 = data_mod5 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*6 :
      data_mod6 = data_mod6 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*7 :
      data_mod7 = data_mod7 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*8 :
      data_mod8 = data_mod8 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*9 :
      data_mod9 = data_mod9 + temp_str + ',' + str(y[i,0]) + '\n'
    else :
      data_mod10 = data_mod10 + temp_str + ',' + str(y[i,0]) + '\n'
    num_data_mod=num_data_mod+1
  elif y[i,0]*180/3.14<=4 and y[i,0]*180/3.14>=-2:
    continue
  elif cnt2<1000 and y[i,0]*180/3.14<=-2 and y[i,0]*180/3.14>=-10:
    cnt2=cnt2+1
    list1=x[i,:,:,:].reshape(200*200*1)
    temp_str = ','.join(str(e) for e in list1)
    if num_data_mod<=555 :
      data_mod1 = data_mod1 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*2 :
      data_mod2 = data_mod2 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*3 :
      data_mod3 = data_mod3 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*4 :
      data_mod4 = data_mod4 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*5 :
      data_mod5 = data_mod5 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*6 :
      data_mod6 = data_mod6 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*7 :
      data_mod7 = data_mod7 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*8 :
      data_mod8 = data_mod8 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*9 :
      data_mod9 = data_mod9 + temp_str + ',' + str(y[i,0]) + '\n'
    else :
      data_mod10 = data_mod10 + temp_str + ',' + str(y[i,0]) + '\n'
    num_data_mod=num_data_mod+1
  elif y[i,0]*180/3.14<=-2 and y[i,0]*180/3.14>=-10:
    continue
  else :
    list1=x[i,:,:,:].reshape(200*200*1)
    temp_str = ','.join(str(e) for e in list1)
    if num_data_mod<=555 :
      data_mod1 = data_mod1 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555 :
      data_mod2 = data_mod2 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*2 :
      data_mod3 = data_mod3 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*3 :
      data_mod4 = data_mod4 + temp_str + ',' + str(y[i,0]) + '\n'
    elif num_data_mod<=555*4 :
      data_mod5 = data_mod5 + temp_str + ',' + str(y[i,0]) + '\n'
      print("5")
    elif num_data_mod<=555*5 :
      data_mod6 = data_mod6 + temp_str + ',' + str(y[i,0]) + '\n'
      print("6")
    elif num_data_mod<=555*6 :
      data_mod7 = data_mod7 + temp_str + ',' + str(y[i,0]) + '\n'
      print("7")
    elif num_data_mod<=555*7 :
      data_mod8 = data_mod8 + temp_str + ',' + str(y[i,0]) + '\n'
      print("8")
    elif num_data_mod<=555*8 :
      data_mod9 = data_mod9 + temp_str + ',' + str(y[i,0]) + '\n'
      print("9")
    else :
      data_mod10 = data_mod10 + temp_str + ',' + str(y[i,0]) + '\n'
      print("10")
    num_data_mod=num_data_mod+1
print(num_data_mod)

!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
# This only needs to be done once in a notebook.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# Create & upload a text file.
out1 = drive.CreateFile({'title': 'data_mod1.txt'})
out1.SetContentString(data_mod1)
out1.Upload()

out2 = drive.CreateFile({'title': 'data_mod2.txt'})
out2.SetContentString(data_mod2)
out2.Upload()

out3 = drive.CreateFile({'title': 'data_mod3.txt'})
out3.SetContentString(data_mod3)
out3.Upload()

out4 = drive.CreateFile({'title': 'data_mod4.txt'})
out4.SetContentString(data_mod4)
out4.Upload()

out5 = drive.CreateFile({'title': 'data_mod5.txt'})
out5.SetContentString(data_mod5)
out5.Upload()
out6 = drive.CreateFile({'title': 'data_mod6.txt'})
out6.SetContentString(data_mod6)
out6.Upload()
out7 = drive.CreateFile({'title': 'data_mod7.txt'})
out7.SetContentString(data_mod7)
out7.Upload()
# out8 = drive.CreateFile({'title': 'data_mod8.txt'})
# out8.SetContentString(data_mod8)
# out8.Upload()
# out9 = drive.CreateFile({'title': 'data_mod9.txt'})
# out9.SetContentString(data_mod9)
# out9.Upload()
# out10 = drive.CreateFile({'title': 'data_mod10.txt'})
# out10.SetContentString(data_mod10)
# out10.Upload()

!pip install -U -q PyDrive
# Install the PyDrive wrapper & import libraries.
# This only needs to be done once per notebook.
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
# This only needs to be done once per notebook.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# Download a file based on its file ID.
# A file ID looks like: laggVyWshwcyP6kEI-y_W3P8D26sz
file1 = drive.CreateFile({'id': '1zmBxn8ygJmHlocwXlqJkPFpo_HDAD6oM'})
file2 = drive.CreateFile({'id': '19mX4-LKu9lq_60-uahuszFJZ6B_cZSG1'})
file3 = drive.CreateFile({'id': '1MX_XLySW09HWCyYcf9X9nlTRHyJJp2J4'})
file4 = drive.CreateFile({'id': '1C1eiF4OR_51rrSdNKDG883fSYj742u4B'})
file5 = drive.CreateFile({'id': '1itJzo21Bq77DJhLOFc46UrGJ1FnFwKvQ'})
file6 = drive.CreateFile({'id': '1vxjiSOevFk13VjinEoOVnTs4dPxjo-VE'})
file7 = drive.CreateFile({'id': '1v9ZJlRmQ7z-0Vz6VmZD80AfKpEi1ciES'})

a1=file1.GetContentString()

# to know size of h
h=0
def compute_h(a):
  b=a.split('\n')
  for i in range(0,len(b)):
    if len(b[i])==0 :
      del b[i]
  return len(b)
h=h+compute_h(a1)
print(h)

import numpy as np
import pylab as plt
x=np.zeros((h,200,200,1))
y=np.zeros((h,1))
ii=0
array = []

def putting_data_in_array(a):
  array = []
  b=a.split('\n')
  for i in range(0,len(b)):
    if len(b[i])==0 :
      del b[i]
  #print(len(b))
  for line in b: # read rest of lines
    array.append([float(x) for x in line.split(',')])
  return array

def assign_values_x_y(array,indx):
  global x
  global y
  for i in range(0+indx,len(array)+indx):
    a=array[i-indx][0:200*200]
    x[i,:,:,0]=np.reshape(a,(200,200))
    y[i][0]=array[i-indx][(200*200)]
  return len(array)


array=putting_data_in_array(a1)
a1=None
ii=ii+assign_values_x_y(array,ii)
array=[]
print(ii)

import matplotlib.pyplot as plt
import numpy as np
gaussian_numbers = y*180/3.14
plt.hist(gaussian_numbers)
plt.title("Gaussian Histogram")
plt.xlabel("Value")
plt.ylabel("Frequency")
fig = plt.gcf()
print(np.amax(y)*180/3.14)